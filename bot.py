import os
import logging
from datetime import datetime, timedelta
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, CallbackQueryHandler, MessageHandler, filters
import openai

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_KEY

# –õ–æ–≥–∏
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)

# /start –∫–æ–º–∞–Ω–¥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("AI –í—ñ–¥–ø–æ–≤—ñ–¥—å", callback_data="ai_response")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –Ø —Ç–≤—ñ–π Telegram –±–æ—Ç ü§ñ
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∫–Ω–æ–ø–∫–∏ –∞–±–æ –∫–æ–º–∞–Ω–¥–∏.", reply_markup=reply_markup)

# /help –∫–æ–º–∞–Ω–¥–∞
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("/start - –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞
/help - –î–æ–ø–æ–º–æ–≥–∞
/time - –ü–æ–∫–∞–∑–∞—Ç–∏ —á–∞—Å
/remind <—Ö–≤–∏–ª–∏–Ω–∏> <—Ç–µ–∫—Å—Ç> - –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è")

# /time –∫–æ–º–∞–Ω–¥–∞
async def time_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    now = datetime.now().strftime("%H:%M:%S")
    await update.message.reply_text(f"–ó–∞—Ä–∞–∑ {now} ‚è∞")

# /remind –∫–æ–º–∞–Ω–¥–∞
async def remind_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        minutes = int(context.args[0])
        text = " ".join(context.args[1:])
        remind_time = datetime.now() + timedelta(minutes=minutes)
        context.job_queue.run_once(lambda ctx: ctx.bot.send_message(chat_id=update.effective_chat.id, text=f"–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {text}"), when=minutes*60)
        await update.message.reply_text(f"–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ {minutes} —Ö–≤–∏–ª–∏–Ω ‚úÖ")
    except:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /remind <—Ö–≤–∏–ª–∏–Ω–∏> <—Ç–µ–∫—Å—Ç>")

# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "ai_response":
        await query.message.reply_text("–ù–∞–ø–∏—à–∏ —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è, —ñ —è –≤—ñ–¥–ø–æ–≤—ñ–º ‚ú®")

# AI –≤—ñ–¥–ø–æ–≤—ñ–¥—å
async def ai_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if OPENAI_KEY is None:
        await update.message.reply_text("‚ö†Ô∏è OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π.")
        return
    user_text = update.message.text
    response = openai.ChatCompletion.create(model="gpt-3.5-turbo", messages=[{"role": "user", "content": user_text}])
    await update.message.reply_text(response["choices"][0]["message"]["content"])

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("time", time_command))
    app.add_handler(CommandHandler("remind", remind_command))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, ai_handler))

    app.run_polling()

if __name__ == "__main__":
    main()
